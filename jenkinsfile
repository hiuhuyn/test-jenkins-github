pipeline {
    agent any
    environment {
        // Thiết lập các biến môi trường nếu cần
        DOCKER_IMAGE_NAME = 'docker-rest-api'
        GITHUB_REPO_URL = 'https://github.com/hiuhuyn/test-jenkins-github.git'
        DOCKER_USER_NAME = 'hiuhuyn'
    }

    stages {
        stage("Cleanup") {
            // Clean workspace directory for the current build
            steps {
                deleteDir ()             
            }
        }
        stage ('Git Checkout') {
            steps {
                dir ("DevopsNodej1"){
                  script {
                    git branch: 'main', url: env.GITHUB_REPO_URL 
                  }
                }
            }
        }   

        stage('Docker Image Build') {
            // Build Docker Image 
            steps{
                dir('DevopsNodej1') {      // go to directory where 'Dockerfile' is stored
                    script {
                      sh "docker build -t ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} ." 
                      
                    }
                }
            }
        }
        stage('Docker Image Tag') {
            // Rename the Docker Image before pushing to Dockerhub
            steps{
                dir('DevopsNodej1') {      // go to directory where Docker Image is created
                  script {
                    sh "docker tag ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} ${DOCKER_USER_NAME}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"
                  }
                }
            } 
        }
        stage('Docker login') {
            // Login to Dockerhub & Push the image to Dockerhub
            steps{
                script { 
                  withCredentials([usernamePassword(credentialsId: 'my-docker-hub', usernameVariable: 'docker_user', passwordVariable: 'docker_pass')]) {
                    sh "docker login -u '${docker_user}' -p '${docker_pass}'"
                  }
                }
            }
        }
        stage('Docker Image Push') {
            // Remove the unwanted (dangling) images created in Jenkins Server to free-up space
            steps{
                script { 
                  sh "docker push ${DOCKER_USER_NAME}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"
                }
            }
        }
        stage('Docker Image Cleanup') {
            // Remove the unwanted (dangling) images created in Jenkins Server to free-up space
            steps{
                script { 
                  sh "docker image prune -af"
                }
            }
        }
    }
    
    post {
        success {
            // Các bước sau khi build thành công
            echo 'Build and push Docker image successfully.'
        }
        failure {
            // Các bước sau khi build thất bại
            echo 'Build and push Docker image failed.'
        }
    }
}
